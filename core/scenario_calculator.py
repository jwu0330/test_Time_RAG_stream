"""
情境編號計算器
根據 K, C, R 三個維度計算情境編號 (1-12)
"""


class ScenarioCalculator:
    """情境編號計算器"""
    
    def calculate(self, k: int, c: int, r: int) -> int:
        """
        計算情境編號
        
        公式：k * 4 + c * 2 + r + 1
        
        Args:
            k: 0=零個, 1=一個, 2=多個
            c: 0=正確, 1=不正確
            r: 0=正常, 1=重複
            
        Returns:
            int: 情境編號 1-12
            
        情境對照表：
        編號 | K值 | C值 | R值 | 說明
        -----|-----|-----|-----|-----
          1  |  0  |  0  |  0  | 零個知識點 & 正確 & 正常
          2  |  0  |  0  |  1  | 零個知識點 & 正確 & 重複
          3  |  0  |  1  |  0  | 零個知識點 & 不正確 & 正常
          4  |  0  |  1  |  1  | 零個知識點 & 不正確 & 重複
          5  |  1  |  0  |  0  | 一個知識點 & 正確 & 正常
          6  |  1  |  0  |  1  | 一個知識點 & 正確 & 重複
          7  |  1  |  1  |  0  | 一個知識點 & 不正確 & 正常
          8  |  1  |  1  |  1  | 一個知識點 & 不正確 & 重複
          9  |  2  |  0  |  0  | 多個知識點 & 正確 & 正常
         10  |  2  |  0  |  1  | 多個知識點 & 正確 & 重複
         11  |  2  |  1  |  0  | 多個知識點 & 不正確 & 正常
         12  |  2  |  1  |  1  | 多個知識點 & 不正確 & 重複
        """
        scenario_number = k * 4 + c * 2 + r + 1
        
        # 確保範圍正確
        if not (1 <= scenario_number <= 12):
            print(f"⚠️ 情境編號異常: {scenario_number}，使用預設值 5")
            return 5  # 預設：一個知識點 + 正確 + 正常
        
        return scenario_number
    
    def get_scenario_description(self, k: int, c: int, r: int) -> str:
        """
        獲取情境描述
        
        Args:
            k: 知識點數量
            c: 正確性
            r: 重複性
            
        Returns:
            str: 情境描述
        """
        k_map = {0: "零個知識點", 1: "一個知識點", 2: "多個知識點"}
        c_map = {0: "正確", 1: "不正確"}
        r_map = {0: "正常", 1: "重複"}
        
        return f"{k_map.get(k, '未知')} & {c_map.get(c, '未知')} & {r_map.get(r, '未知')}"
