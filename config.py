"""
Á≥ªÁµ±ÈÖçÁΩÆÊñá‰ª∂
Áî®ÊñºË®≠ÂÆöÊ®°ÂûãÂíåÁ≥ªÁµ±ÂèÉÊï∏
"""

class Config:
    """Á≥ªÁµ±ÈÖçÁΩÆÈ°û"""
    
    # ==================== ÂÖ±‰∫´ OpenAI Client ====================
    
    _openai_client = None
    
    @classmethod
    def get_openai_client(cls, api_key: str = None):
        """
        Áç≤ÂèñÂÖ±‰∫´ÁöÑ OpenAI clientÔºàÂñÆ‰æãÊ®°ÂºèÔºâ
        
        Args:
            api_key: OpenAI API KeyÔºàÂèØÈÅ∏Ôºâ
            
        Returns:
            OpenAI client ÂØ¶‰æã
        """
        if cls._openai_client is None:
            from openai import OpenAI
            print("‚öôÔ∏è ÂàùÂßãÂåñÂÖ±‰∫´ OpenAI client...")
            cls._openai_client = OpenAI(api_key=api_key) if api_key else OpenAI()
            print("‚úÖ OpenAI client ÂàùÂßãÂåñÂÆåÊàê")
        return cls._openai_client
    
    # ==================== Ê®°ÂûãÈÖçÁΩÆ ====================
    
    # Embedding Ê®°Âûã
    # ÈÅ∏È†Ö: "text-embedding-3-small", "text-embedding-3-large", "text-embedding-ada-002"
    EMBEDDING_MODEL = "text-embedding-3-small"
    
    # ‰∏ªË¶Å LLM Ê®°ÂûãÔºàÁî®ÊñºÁîüÊàêËçâÁ®øÂíåÊúÄÁµÇÁ≠îÊ°àÔºâ
    # ÈÅ∏È†Ö: "gpt-3.5-turbo", "gpt-4", "gpt-4-turbo", "gpt-4o", "gpt-4o-mini"
    LLM_MODEL = "gpt-4o-mini"
    
    # ÊÉÖÂ¢ÉÂàÜÈ°ûÊ®°ÂûãÔºàÁî®Êñº K/C/R ‰∏âÁ∂≠Â∫¶Âà§ÂÆöÔºâ
    # ÈÅ∏È†Ö: "gpt-3.5-turbo", "gpt-4", "gpt-4-turbo", "gpt-4o-mini"
    # ‰ΩøÁî® gpt-4o-mini Áç≤ÂæóÊõ¥Âø´ÁöÑÈüøÊáâÈÄüÂ∫¶
    CLASSIFIER_MODEL = "gpt-4o-mini"
    
    @classmethod
    def verify_model_config(cls):
        """È©óË≠âÊ®°ÂûãÈÖçÁΩÆ‰∏¶ÊâìÂç∞"""
        print(f"\n{'='*60}")
        print(f"ü§ñ Ê®°ÂûãÈÖçÁΩÆÈ©óË≠â")
        print(f"{'='*60}")
        print(f"  Embedding Ê®°Âûã: {cls.EMBEDDING_MODEL}")
        print(f"  ‰∏ªË¶Å LLM Ê®°Âûã: {cls.LLM_MODEL}")
        print(f"  ÂàÜÈ°ûÂô®Ê®°Âûã: {cls.CLASSIFIER_MODEL}")
        print(f"{'='*60}")
        
        # È©óË≠âÊòØÂê¶‰ΩøÁî® gpt-4o-mini
        if cls.CLASSIFIER_MODEL != "gpt-4o-mini":
            print(f"‚ö†Ô∏è  Ë≠¶ÂëäÔºöÂàÜÈ°ûÂô®Ê®°Âûã‰∏çÊòØ gpt-4o-miniÔºåÂèØËÉΩÂΩ±ÈüøÊïàËÉΩ")
        else:
            print(f"‚úÖ ÂàÜÈ°ûÂô®Ê®°ÂûãÂ∑≤Ê≠£Á¢∫Ë®≠ÂÆöÁÇ∫ gpt-4o-mini")
        
        if cls.LLM_MODEL != "gpt-4o-mini":
            print(f"‚ö†Ô∏è  Ë≠¶ÂëäÔºö‰∏ªË¶Å LLM Ê®°Âûã‰∏çÊòØ gpt-4o-mini")
        else:
            print(f"‚úÖ ‰∏ªË¶Å LLM Ê®°ÂûãÂ∑≤Ê≠£Á¢∫Ë®≠ÂÆöÁÇ∫ gpt-4o-mini")
        
        print(f"{'='*60}\n")
    
    # ==================== Á≥ªÁµ±ÂèÉÊï∏ ====================
    
    # Ê≠∑Âè≤Á¥ÄÈåÑ‰øùÂ≠òÊï∏Èáè
    HISTORY_SIZE = 10
    
    # ÈáçË§áË©¢ÂïèÈñæÂÄºÔºàÈÄ£Á∫åË©¢ÂïèÂêå‰∏ÄÁü•Ë≠òÈªûË∂ÖÈÅéÊ≠§Ê¨°Êï∏Ë¶ñÁÇ∫ÈáçË§áÔºâ
    REPETITION_THRESHOLD = 3
    
    # RAG Ê™¢Á¥¢ÂèÉÊï∏
    RAG_TOP_K = 3  # ËøîÂõûÂâç K ÂÄãÊúÄÁõ∏ÈóúÊñá‰ª∂
    RAG_SIMILARITY_THRESHOLD = 0.7  # Áõ∏‰ººÂ∫¶ÈñæÂÄº
    
    # LLM ÁîüÊàêÂèÉÊï∏
    LLM_TEMPERATURE = 0.7  # Ê∫´Â∫¶ÂèÉÊï∏Ôºà0-1ÔºåË∂äÈ´òË∂äÈö®Ê©üÔºâ
    LLM_MAX_TOKENS = 500  # ËçâÁ®øÊúÄÂ§ß token Êï∏
    LLM_FINAL_MAX_TOKENS = 200  # ÊúÄÁµÇÁ≠îÊ°àÊúÄÂ§ß token Êï∏ÔºàÊ∏¨Ë©¶Áí∞Â¢ÉÔºöÁ¥Ñ100Â≠óÔºâ
    
    # ==================== ÂÑ≤Â≠òË∑ØÂæë ====================
    
    # ÂêëÈáèÂÑ≤Â≠òË∑ØÂæë
    VECTOR_STORAGE_PATH = "vectors.pkl"
    
    # Ê≠∑Âè≤Á¥ÄÈåÑÂÑ≤Â≠òË∑ØÂæë
    HISTORY_STORAGE_PATH = "history.json"
    
    # ÁµêÊûúËº∏Âá∫ÁõÆÈåÑ
    RESULTS_DIR = "results"
    
    # Êñá‰ª∂ÁõÆÈåÑ
    DOCS_DIR = "data/docs"
    
    # ÊÉÖÂ¢ÉÁõÆÈåÑ
    SCENARIOS_DIR = "data/scenarios"
    
    # ==================== ‰∏âÁ∂≠Â∫¶ÂÆöÁæ© ====================
    
    DIMENSIONS = {
        "K": {
            "name": "Áü•Ë≠òÈªûÊï∏Èáè",
            "description": "ÈÄôÂè•Ë©±ÁâΩÊ∂âÂà∞ÁöÑÁü•Ë≠òÈªûÊï∏Èáè",
            "values": ["Èõ∂ÂÄã", "‰∏ÄÂÄã", "Â§öÂÄã"]
        },
        "C": {
            "name": "Ê≠£Á¢∫ÊÄß",
            "description": "ÈÄôÂè•Ë©±ÁöÑË°®ÈÅîÊòØÂê¶Ê≠£Á¢∫",
            "values": ["Ê≠£Á¢∫", "‰∏çÊ≠£Á¢∫"]
        },
        "R": {
            "name": "ÈáçË§áÊÄß",
            "description": "ÊòØÂê¶Âú®Âêå‰∏ÄÁü•Ë≠òÈªû‰∏äÈáçË§áË©¢ÂïèÂ§öÊ¨°",
            "values": ["Ê≠£Â∏∏", "ÈáçË§á"],
            "threshold": REPETITION_THRESHOLD
        }
    }
    
    # ==================== Áü•Ë≠òÈªûÊò†Â∞Ñ ====================
    
    # Êñá‰ª∂Âà∞Áü•Ë≠òÈªûÁöÑÊò†Â∞ÑÔºàIP Á∂≤Ë∑ØÁõ∏ÈóúÁü•Ë≠òÈªûÔºâ
    KNOWLEDGE_POINTS = {
        "01_IP‰ΩçÂùÄ.txt": "IP ‰ΩçÂùÄ",
        "02_IPv4.txt": "IPv4",
        "03_IPv6.txt": "IPv6",
        "04_Â§öÊí≠‰ΩçÂùÄ.txt": "Â§öÊí≠‰ΩçÂùÄ",
        "05_‰ªªÊí≠‰ΩçÂùÄ.txt": "‰ªªÊí≠‰ΩçÂùÄ",
        "06_Âª£Êí≠‰ΩçÂùÄ.txt": "Âª£Êí≠‰ΩçÂùÄ",
        "07_ÂõûÈÄÅ‰ΩçÂùÄ.txt": "ÂõûÈÄÅ‰ΩçÂùÄ",
        "08_ÂÖ¨Êúâ‰ΩçÂùÄ.txt": "ÂÖ¨Êúâ‰ΩçÂùÄ",
        "09_ÁßÅÊúâ‰ΩçÂùÄ.txt": "ÁßÅÊúâ‰ΩçÂùÄ",
        "10_Link-Local.txt": "Link-Local",
        "11_Global_Unicast.txt": "Global Unicast",
        "12_‰ΩçÂùÄÂ∞çÊò†.txt": "‰ΩçÂùÄÂ∞çÊò†",
        "13_Dual_Stack.txt": "Dual Stack",
        "14_CGNAT.txt": "CGNAT",
        "15_NAT.txt": "NAT",
        "16_PAT_NAPT.txt": "PAT / NAPT",
        "17_NAT64_DNS64.txt": "NAT64 / DNS64",
        "18_‰ΩçÂùÄÂàÜÈÖçÊñπÂºè.txt": "‰ΩçÂùÄÂàÜÈÖçÊñπÂºè",
        "19_ÈùúÊÖãÂàÜÈÖç.txt": "ÈùúÊÖãÂàÜÈÖç",
        "20_ÂãïÊÖãÂàÜÈÖç.txt": "ÂãïÊÖãÂàÜÈÖç",
        "21_DHCP.txt": "DHCP",
        "22_SLAAC.txt": "SLAAC",
        "23_Router_Advertisement.txt": "Router Advertisement (RA)",
        "24_Â≠êÁ∂≤ÂäÉÂàÜ.txt": "Â≠êÁ∂≤ÂäÉÂàÜ",
        "25_Â≠êÁ∂≤ÈÅÆÁΩ©.txt": "Â≠êÁ∂≤ÈÅÆÁΩ©",
        "26_Ë∂ÖÁ∂≤.txt": "Ë∂ÖÁ∂≤",
        "27_CIDR.txt": "CIDR",
        "28_VLSM.txt": "VLSM",
        "29_DNS.txt": "DNS",
        "30_DNS‰º∫Êúç.txt": "DNS ‰º∫Êúç",
        "31_DNSÂø´Âèñ.txt": "DNS Âø´Âèñ",
        "32_ÈÅûËø¥Ëß£Êûê.txt": "ÈÅûËø¥Ëß£Êûê",
        "33_Ê†π‰º∫ÊúçÂô®.txt": "Ê†π‰º∫ÊúçÂô®",
        "34_TLD‰º∫ÊúçÂô®.txt": "TLD ‰º∫ÊúçÂô®",
        "35_ÊéàÊ¨ä‰º∫ÊúçÂô®.txt": "ÊéàÊ¨ä‰º∫ÊúçÂô®",
        "36_ÂçÄÂüüÈ°ûÂûã.txt": "ÂçÄÂüüÈ°ûÂûã",
        "37_AË®òÈåÑ.txt": "A Ë®òÈåÑ",
        "38_AAAAË®òÈåÑ.txt": "AAAA Ë®òÈåÑ",
        "39_NSË®òÈåÑ.txt": "NS Ë®òÈåÑ",
        "40_MXË®òÈåÑ.txt": "MX Ë®òÈåÑ",
        "41_CNAMEË®òÈåÑ.txt": "CNAME Ë®òÈåÑ",
        "42_Mail_Server.txt": "Mail Server",
        "43_Âè¶‰∏ÄÁ∂≤ÂüüÂêçÁ®±.txt": "Âè¶‰∏ÄÁ∂≤ÂüüÂêçÁ®±",
        "44_Á∂≤Ë∑Ø‰ΩçÂùÄËΩâË≠Ø.txt": "Á∂≤Ë∑Ø‰ΩçÂùÄËΩâË≠Ø",
        "45_IP‰ΩçÂùÄÁÆ°ÁêÜ.txt": "IP ‰ΩçÂùÄÁÆ°ÁêÜ"
    }
    
    # ==================== Web ÁïåÈù¢ÈÖçÁΩÆ ====================
    
    # API ÊúçÂãôÂô®ÈÖçÁΩÆ
    API_HOST = "0.0.0.0"
    API_PORT = 8000
    
    # CORS Ë®≠ÂÆö
    CORS_ORIGINS = ["*"]  # ÁîüÁî¢Áí∞Â¢ÉÊáâË©≤Ë®≠ÂÆöÂÖ∑È´îÂüüÂêç
    
    # ÊòØÂê¶ÂïüÁî®ÊµÅÂºèËº∏Âá∫
    ENABLE_STREAMING = True


# ÂâµÂª∫ÂÖ®Â±ÄÈÖçÁΩÆÂØ¶‰æã
config = Config()

# ‰æøÊç∑ÂáΩÊï∏
def get_shared_client(api_key: str = None):
    """Áç≤ÂèñÂÖ±‰∫´ÁöÑ OpenAI client"""
    return Config.get_openai_client(api_key)


def update_config(**kwargs):
    """
    ÂãïÊÖãÊõ¥Êñ∞ÈÖçÁΩÆ
    
    Args:
        **kwargs: Ë¶ÅÊõ¥Êñ∞ÁöÑÈÖçÁΩÆÈ†Ö
    
    Example:
        update_config(LLM_MODEL="gpt-4", RAG_TOP_K=5)
    """
    for key, value in kwargs.items():
        if hasattr(Config, key):
            setattr(Config, key, value)
        else:
            raise ValueError(f"Êú™Áü•ÁöÑÈÖçÁΩÆÈ†Ö: {key}")


def get_config_summary() -> dict:
    """
    Áç≤ÂèñÈÖçÁΩÆÊëòË¶Å
    
    Returns:
        ÈÖçÁΩÆÊëòË¶ÅÂ≠óÂÖ∏
    """
    return {
        "models": {
            "embedding": Config.EMBEDDING_MODEL,
            "llm": Config.LLM_MODEL,
            "classifier": Config.CLASSIFIER_MODEL
        },
        "parameters": {
            "history_size": Config.HISTORY_SIZE,
            "repetition_threshold": Config.REPETITION_THRESHOLD,
            "rag_top_k": Config.RAG_TOP_K,
            "temperature": Config.LLM_TEMPERATURE
        },
        "paths": {
            "vectors": Config.VECTOR_STORAGE_PATH,
            "history": Config.HISTORY_STORAGE_PATH,
            "results": Config.RESULTS_DIR
        }
    }
